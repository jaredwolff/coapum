name: Performance

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    # Run performance tests weekly on Sundays at 2 AM UTC
    - cron: "0 2 * * 0"

env:
  CARGO_TERM_COLOR: always

jobs:
  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-bench-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-bench-


      - name: Run benchmarks
        run: |
          echo "üöÄ Running performance benchmarks..."
          cargo bench --all-features
          echo "‚úÖ Benchmarks completed"
          
      - name: Verify benchmark results
        run: |
          echo "üîç Checking for benchmark results..."
          echo "üìÅ Current directory: $(pwd)"
          echo "üìÅ Listing target directory:"
          find target -type f -name "*.json" | head -20
          if [ -f target/criterion/coap_router/base/estimates.json ]; then
            echo "‚úÖ Benchmark results file found"
            echo "üìÑ File contents:"
            cat target/criterion/coap_router/base/estimates.json
          else
            echo "‚ùå Benchmark results file not found"
          fi

      - name: Store benchmark results
        uses: benchmark-action/github-action-benchmark@v2
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        with:
          name: Rust Benchmark
          tool: "cargo"
          output-file-path: target/criterion/coap_router/base/estimates.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
          comment-on-alert: true
          alert-threshold: "150%"
          fail-on-alert: false
          summary-always: true
          benchmark-data-dir-path: .

      - name: Compare PR benchmarks
        uses: benchmark-action/github-action-benchmark@v2
        if: github.event_name == 'pull_request'
        with:
          name: Rust Benchmark
          tool: "cargo"
          output-file-path: target/criterion/coap_router/base/estimates.json
          github-token: ${{ secrets.GITHUB_TOKEN }}
          comment-on-alert: true
          alert-threshold: "150%"
          fail-on-alert: false
          summary-always: true
          benchmark-data-dir-path: .

  memory-profiling:
    name: Memory Profiling
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v5

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install valgrind
        run: |
          sudo apt-get update
          sudo apt-get install -y valgrind

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-memory-${{ hashFiles('**/Cargo.lock') }}

      - name: Build examples for profiling
        run: |
          cargo build --examples --all-features
          echo "‚úÖ Built examples for memory profiling"

      - name: Run memory profiling
        run: |
          echo "üîç Running memory profiling..."

          # Create memory profile directory
          mkdir -p memory-profiles

          # Profile CBOR server startup and shutdown
          timeout 30s valgrind --tool=massif --massif-out-file=memory-profiles/cbor-server.out \
            cargo run --example cbor_server &
          SERVER_PID=$!

          sleep 10
          kill $SERVER_PID 2>/dev/null || true
          wait $SERVER_PID 2>/dev/null || true

          # Generate memory usage report
          if [ -f memory-profiles/cbor-server.out ]; then
            ms_print memory-profiles/cbor-server.out > memory-profiles/cbor-server-report.txt
            echo "üìä Memory profile generated for CBOR server"
            head -20 memory-profiles/cbor-server-report.txt
          fi

      - name: Upload memory profiles
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: memory-profiles
          path: memory-profiles/
          retention-days: 30

  load-test:
    name: Load Testing
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout sources
        uses: actions/checkout@v5

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-load-test-${{ hashFiles('**/Cargo.lock') }}

      - name: Build examples
        run: cargo build --examples --all-features --release

      - name: Install load testing tools
        run: |
          # Install a simple HTTP load testing tool
          sudo apt-get update
          sudo apt-get install -y apache2-utils curl

      - name: Run load test
        timeout-minutes: 5
        run: |
          echo "üöÄ Starting load test..."

          # Start server in release mode
          RUST_LOG=warn ./target/release/examples/cbor_server &
          SERVER_PID=$!

          # Wait for server to start
          sleep 5

          # Create load test results directory
          mkdir -p load-test-results

          # Run concurrent connection test
          echo "üìà Testing concurrent connections..."

          # Simple load test simulation
          for i in {1..10}; do
            timeout 10s ./target/release/examples/cbor_client &
          done

          # Wait for all clients to complete
          wait

          # Clean up server
          kill $SERVER_PID 2>/dev/null || true
          wait $SERVER_PID 2>/dev/null || true

          echo "‚úÖ Load test completed"

      - name: Performance regression check
        run: |
          echo "üîç Checking for performance regressions..."

          # This would typically compare against baseline metrics
          # For now, we'll just validate that benchmarks ran successfully
          if [ -f target/criterion/coap_router/base/estimates.json ]; then
            echo "‚úÖ Benchmark data found"

            # Extract key metrics (this is a simplified example)
            ROUTER_TIME=$(grep -o '"point_estimate":[0-9.]*' target/criterion/coap_router/base/estimates.json | cut -d: -f2)
            echo "üìä Router benchmark time: ${ROUTER_TIME}ns"

            # Simple threshold check (adjust as needed)
            THRESHOLD=1000000  # 1ms in nanoseconds
            if (( $(echo "$ROUTER_TIME > $THRESHOLD" | bc -l) )); then
              echo "‚ö†Ô∏è  Performance regression detected: router time ${ROUTER_TIME}ns exceeds threshold ${THRESHOLD}ns"
              # Don't fail the build for now, just warn
            else
              echo "‚úÖ Performance within acceptable limits"
            fi
          else
            echo "‚ö†Ô∏è  No benchmark data found"
          fi

  resource-usage:
    name: Resource Usage Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v5

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-resource-${{ hashFiles('**/Cargo.lock') }}

      - name: Install monitoring tools
        run: |
          sudo apt-get update
          sudo apt-get install -y htop sysstat

      - name: Build examples
        run: cargo build --examples --all-features

      - name: Analyze resource usage
        timeout-minutes: 2
        run: |
          echo "üìä Analyzing resource usage..."

          # Start resource monitoring
          sar -u -r 1 60 > resource-usage.log &
          SAR_PID=$!

          # Start server
          cargo run --example cbor_server &
          SERVER_PID=$!

          # Let it run for a bit
          sleep 30

          # Run some client requests
          for i in {1..5}; do
            timeout 5s cargo run --example cbor_client || true
            sleep 2
          done

          # Clean up
          kill $SERVER_PID $SAR_PID 2>/dev/null || true
          wait $SERVER_PID $SAR_PID 2>/dev/null || true

          # Analyze results
          echo "üìà Resource usage summary:"
          if [ -f resource-usage.log ]; then
            echo "Average CPU and Memory usage:"
            tail -10 resource-usage.log
          fi

      - name: Upload resource analysis
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: resource-analysis
          path: |
            resource-usage.log
          retention-days: 7

  performance-summary:
    name: Performance Summary
    runs-on: ubuntu-latest
    needs: [benchmark, memory-profiling, resource-usage]
    if: always()
    steps:
      - name: Performance Summary
        run: |
          echo "üìä **Performance Test Summary**"
          echo ""
          echo "‚úÖ **Completed Jobs:**"

          if [[ "${{ needs.benchmark.result }}" == "success" ]]; then
            echo "- ‚úÖ Benchmarks: PASSED"
          else
            echo "- ‚ùå Benchmarks: FAILED"
          fi

          if [[ "${{ needs.memory-profiling.result }}" == "success" ]]; then
            echo "- ‚úÖ Memory Profiling: PASSED"
          else
            echo "- ‚ùå Memory Profiling: FAILED"
          fi

          if [[ "${{ needs.resource-usage.result }}" == "success" ]]; then
            echo "- ‚úÖ Resource Usage Analysis: PASSED"
          else
            echo "- ‚ùå Resource Usage Analysis: FAILED"
          fi

          echo ""
          echo "üìà **Performance Metrics:**"
          echo "- Router performance benchmarks completed"
          echo "- Memory usage profiled"
          echo "- Resource utilization analyzed"
          echo ""
          echo "üîó **Artifacts:**"
          echo "- Benchmark results stored for trending"
          echo "- Memory profiles available for download"
          echo "- Resource usage logs captured"
