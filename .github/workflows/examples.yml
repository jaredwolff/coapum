name: Examples

on:
  push:
    branches: [main, develop]
    paths:
      - "examples/**"
      - "src/**"
      - "Cargo.toml"
      - "Cargo.lock"
  pull_request:
    branches: [main]
    paths:
      - "examples/**"
      - "src/**"
      - "Cargo.toml"
      - "Cargo.lock"

env:
  CARGO_TERM_COLOR: always
  RUST_LOG: info

jobs:
  compile-examples:
    name: Compile Examples
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v5

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-examples-${{ hashFiles('**/Cargo.lock') }}

      - name: Compile all examples
        run: |
          echo "üì¶ Compiling all example applications..."
          cargo build --examples --all-features --verbose
          echo "‚úÖ All examples compiled successfully"

      - name: List compiled examples
        run: |
          echo "üìã Available example binaries:"
          ls -la target/debug/examples/ | grep -E "(cbor_server|cbor_client|raw_server|raw_client|concurrency)"

  test-examples:
    name: Test Examples
    runs-on: ubuntu-latest
    needs: compile-examples
    strategy:
      matrix:
        example:
          - name: "CBOR Server/Client"
            server: "cbor_server"
            client: "cbor_client"
            port: "5684"
          - name: "Raw Server/Client"
            server: "raw_server"
            client: "raw_client"
            port: "5685"
    steps:
      - name: Checkout sources
        uses: actions/checkout@v5

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-examples-${{ hashFiles('**/Cargo.lock') }}

      - name: Build examples
        run: cargo build --examples --all-features

      - name: Test ${{ matrix.example.name }}
        timeout-minutes: 2
        run: |
          echo "üöÄ Testing ${{ matrix.example.name }}..."

          # Modify server port to avoid conflicts
          PORT=${{ matrix.example.port }}

          # Start server in background
          RUST_LOG=info timeout 60s cargo run --example ${{ matrix.example.server }} &
          SERVER_PID=$!

          echo "üì° Started ${{ matrix.example.server }} (PID: $SERVER_PID) on port $PORT"

          # Wait for server to start
          sleep 8

          # Check if server is still running
          if ! kill -0 $SERVER_PID 2>/dev/null; then
            echo "‚ùå Server failed to start or crashed"
            exit 1
          fi

          echo "‚úÖ Server is running"

          # Run client test (with timeout to prevent hanging)
          echo "üì§ Running client test..."
          timeout 15s cargo run --example ${{ matrix.example.client }} || {
            echo "‚ö†Ô∏è  Client test completed (may have failed due to connection issues, which is expected in CI)"
          }

          # Clean up server
          echo "üßπ Cleaning up server..."
          kill $SERVER_PID 2>/dev/null || true
          wait $SERVER_PID 2>/dev/null || true

          echo "‚úÖ ${{ matrix.example.name }} test completed"

  test-concurrency:
    name: Test Concurrency Example
    runs-on: ubuntu-latest
    needs: compile-examples
    steps:
      - name: Checkout sources
        uses: actions/checkout@v5

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-examples-${{ hashFiles('**/Cargo.lock') }}

      - name: Build concurrency example
        run: cargo build --example concurrency --all-features

      - name: Test concurrency example
        timeout-minutes: 1
        run: |
          echo "üöÄ Testing concurrency example..."

          # Run concurrency test with timeout
          timeout 30s cargo run --example concurrency || {
            EXIT_CODE=$?
            if [ $EXIT_CODE -eq 124 ]; then
              echo "‚úÖ Concurrency example ran for expected duration"
            else
              echo "‚ö†Ô∏è  Concurrency example exited with code $EXIT_CODE"
            fi
          }

  validate-examples:
    name: Validate Example Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v5

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-examples-lint-${{ hashFiles('**/Cargo.lock') }}

      - name: Lint examples with Clippy
        run: |
          echo "üîç Running Clippy on example applications..."
          cargo clippy --examples --all-features -- -D warnings
          echo "‚úÖ All examples pass Clippy checks"

      - name: Check example documentation
        run: |
          echo "üìö Checking example documentation..."
          # Check that examples have proper doc comments
          for example in examples/*.rs; do
            if ! grep -q "//!" "$example"; then
              echo "‚ö†Ô∏è  $example is missing module documentation"
            else
              echo "‚úÖ $example has documentation"
            fi
          done

  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: [compile-examples, test-examples]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout sources
        uses: actions/checkout@v5

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-integration-${{ hashFiles('**/Cargo.lock') }}

      - name: Build all examples
        run: cargo build --examples --all-features

      - name: Run comprehensive integration test
        timeout-minutes: 3
        run: |
          echo "üîÑ Running comprehensive integration test..."

          # Start CBOR server
          echo "üì° Starting CBOR server..."
          RUST_LOG=debug timeout 120s cargo run --example cbor_server &
          CBOR_SERVER_PID=$!

          # Start Raw server on different port
          echo "üì° Starting Raw server..."
          RUST_LOG=debug timeout 120s cargo run --example raw_server &
          RAW_SERVER_PID=$!

          # Wait for servers to start
          sleep 10

          # Test CBOR client
          echo "üì§ Testing CBOR client..."
          timeout 20s cargo run --example cbor_client &
          CBOR_CLIENT_PID=$!

          # Test Raw client
          echo "üì§ Testing Raw client..."
          timeout 20s cargo run --example raw_client &
          RAW_CLIENT_PID=$!

          # Wait for clients to complete
          wait $CBOR_CLIENT_PID 2>/dev/null || echo "CBOR client completed"
          wait $RAW_CLIENT_PID 2>/dev/null || echo "Raw client completed"

          # Clean up servers
          echo "üßπ Cleaning up servers..."
          kill $CBOR_SERVER_PID $RAW_SERVER_PID 2>/dev/null || true
          wait $CBOR_SERVER_PID $RAW_SERVER_PID 2>/dev/null || true

          echo "‚úÖ Integration test completed successfully"

  # This job ensures all example tests pass
  examples-success:
    name: Examples Success
    runs-on: ubuntu-latest
    needs:
      [compile-examples, test-examples, test-concurrency, validate-examples]
    if: always()
    steps:
      - name: Check all jobs
        run: |
          if [[ "${{ needs.compile-examples.result }}" != "success" ]]; then
            echo "‚ùå Example compilation failed"
            exit 1
          fi
          if [[ "${{ needs.test-examples.result }}" != "success" ]]; then
            echo "‚ùå Example testing failed"
            exit 1
          fi
          if [[ "${{ needs.test-concurrency.result }}" != "success" ]]; then
            echo "‚ùå Concurrency example failed"
            exit 1
          fi
          if [[ "${{ needs.validate-examples.result }}" != "success" ]]; then
            echo "‚ùå Example validation failed"
            exit 1
          fi
          echo "‚úÖ All example tests passed!"
